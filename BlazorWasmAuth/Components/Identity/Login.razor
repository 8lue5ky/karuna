@page "/login"
@using System.ComponentModel.DataAnnotations
@using Frontend.Identity
@using Frontend.Identity.Models
@inject IAccountManagement Acct
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Login</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudPaper Elevation="3" Class="pa-4 rounded-lg">
        <MudText Typo="Typo.h4" GutterBottom>Login</MudText>

        <AuthorizeView>
            <Authorized Context="authContext">
                <MudAlert Severity="Severity.Success" Class="mb-4">
                    You're logged in as @authContext.User.Identity?.Name.
                </MudAlert>
            </Authorized>

            <NotAuthorized Context="notAuthContext">
                @if (formResult.ErrorList.Any())
                {
                    @foreach (var error in formResult.ErrorList)
                    {
                        <MudAlert Severity="Severity.Error" Dense="true" Class="mb-2">@error</MudAlert>
                    }
                }

                <EditForm Model="Input" OnValidSubmit="LoginUser" Context="formContext">
                    <DataAnnotationsValidator />

                    <MudText Typo="Typo.subtitle1" Class="mb-2">Use a local account to log in</MudText>
                    <MudDivider Class="mb-4" />

                    <MudTextField @bind-Value="Input.Email"
                                  Label="Email"
                                  For="() => Input.Email"
                                  Required="true"
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  Margin="Margin.Dense" />

                    <MudTextField @bind-Value="Input.Password"
                                  Label="Password"
                                  For="() => Input.Password"
                                  Required="true"
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Margin="Margin.Dense" />

                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               Class="mt-4">
                        Log in
                    </MudButton>

                    <MudText Class="mt-4" Align="Align.Center">
                        <MudLink Href="register">Register as a new user</MudLink>
                    </MudText>
                </EditForm>
            </NotAuthorized>
        </AuthorizeView>
    </MudPaper>
</MudContainer>

@code {
    private FormResult formResult = new();

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task LoginUser()
    {
        formResult = await Acct.LoginAsync(Input.Email, Input.Password);

        if (formResult.Succeeded)
        {
            Snackbar.Add("Login successful", Severity.Success);

            if (!string.IsNullOrEmpty(ReturnUrl))
                Navigation.NavigateTo(ReturnUrl);
            else
                Navigation.NavigateTo("/");
        }
        else
        {
            Snackbar.Add("Login failed", Severity.Error);
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;
    }
}